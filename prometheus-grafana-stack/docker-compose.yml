version: '3.8'

networks:
  monitoring:
    driver: bridge

# networks:
#   front-tier:
#   back-tier:

volumes:
  prometheus_data: {}
  grafana_data: {}
  prometheus_config_data: {}
  alertmanager_config_data: {}

services:
  prometheus:
    image: prom/prometheus:latest # Use the Prometheus version that suits your needs
    volumes:
      - prometheus_config_data:/etc/prometheus/
      - prometheus_data:/prometheus # Data volume for Prometheus data
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090" # Expose Prometheus on localhost:9090
    links:
      - cadvisor:cadvisor
      - alertmanager:alertmanager
    depends_on:
      - cadvisor
    restart: unless-stopped

    networks:
      - monitoring

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - 9100:9100
    networks:
      - monitoring
    alertmanager:
      image: prom/alertmanager
      ports:
        - 9093:9093
      volumes:
        - "alertmanager_config_data:/etc/alertmanager/"
      networks:
        - monitoring
      command:
        - '--config.file=/etc/alertmanager/config.yml'
        - '--storage.path=/alertmanager'
      deploy:
        placement:
          constraints:
            - node.role==manager
        restart_policy:
          condition: on-failure

    cadvisor:
      image: gcr.io/cadvisor/cadvisor
      volumes:
        - /:/rootfs:ro
        - /var/run:/var/run:rw
        - /sys:/sys:ro
        - /var/lib/docker/:/var/lib/docker:ro
      ports:
        - 8080:8080
      networks:
        - monitoring
      deploy:
        mode: global
        restart_policy:
            condition: on-failure
      depends_on:
        - redis

    redis:
      image: redis:latest
      container_name: redis
      ports:
        - 6379:6379

    grafana:
      image: grafana/grafana:latest
      container_name: grafana
      user: "472" # Grafana is configured to use the user ID 472
      environment:
        GF_SECURITY_ADMIN_PASSWORD: "secret" # Change this to a secure password
        GF_USERS_ALLOW_SIGN_UP: "false"
      volumes:
        - grafana-data:/var/lib/grafana # Persists Grafana data
        - ./grafana-provisioning:/etc/grafana/provisioning # Mount provisioning files
      ports:
        - "3000:3000"
      restart: unless-stopped 

      networks:
        - monitoring                  
